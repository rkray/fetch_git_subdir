#!/usr/bin/ruby
# Author: Ren√© Kray <rene@kray.info>
# Date: 08.03.2016
# repository: https://github.com/rkray/fetch_git_subdir

require 'optparse'
require 'json'
require 'pp'
require 'net/http'
require 'openssl'
require 'base64'
require 'uri'
require 'timeout'

class FetchGitSubdir
    attr_accessor :version, :verbose, :log, :conf

    class Error < RuntimeError
    end

    class FileNotFound < Error
    end

    class PathNotSpecified < Error
    end

    class RepoPermissionDenied < Error
    end

    def initialize
        @conf={
            :debug          => nil,
            :uri            => nil,
            :passvarname    => "GITPASS",
            :readpass       => nil,
            :verbose        => nil,
            :branch         => nil,
            :path           => nil,
            :topleveldir    => nil,
            :stdin_timeout  => 1,
            :target         => "."
        }
        option_parser
    end

    def run
        #self.send @conf[:mode]

        raise PathNotSpecified if @conf[:path].nil?

        debug "update_path"
        update_path
        debug "update_private_token"
        update_private_token

        debug "update_project_id"
        update_project_id

        debug "-"*20,@conf,"-"*20

        if @conf[:path]==""
            debug "get all"
            get_dirtree
        elsif check_for_single_blob
            debug "get_single_blob"
            get_single_blob
        else
            debug "get_dirtree"
            get_dirtree
        end

    rescue PathNotSpecified
        STDERR.puts "ERROR: you have to specify a path (option -a)."
        exit 1
    rescue FileNotFound
        STDERR.puts "ERROR: can't find file #{@conf[:path]} in repository."
        exit 1
    rescue RepoPermissionDenied
        STDERR.puts "ERROR: can't read from repository. Permission denied.\nCheck the username and password."
        exit 1
    rescue Exception => e
        STDERR.puts e.message
        debug "Class: "+e.class.to_s
        debug e.backtrace
        #debug e.message,e.backtrace,e.inspect
    end

    private

    # analyze the option and update the config
    def update_path
        unless @conf[:path].nil?
            
            # if there is an trailing / than remove the / and set @conf[:dopleveldir]=true
            if @conf[:path][-1] == '/'
                @conf[:path]=@conf[:path][0..-2]
                @conf[:topleveldir]=true
            end

            # remove leading /
            if @conf[:path][0] == '/'
                @conf[:path]=@conf[:path][1..-1]
            end

            # set @conf[:basedir]
            if @conf[:path].scan('/').length > 0
                @conf[:basedir]=@conf[:path].split('/')[0..-2].join('/')+'/'
            end
        end
    end


    # this function checks the @conf[:path] variable and gives true back if the path
    # linket to a blob or false if it links to 
    # TODO
    # - handle symlinks correctly
    def check_for_single_blob
        
        debug "check_for_single_blob"

        returnvalue = get_entry @conf[:path]

        if returnvalue["type"] == "blob"
            return true
        else
            return false
        end
    end

    # this function gets the directory entry for a path and return this structure
    # {"id"=>"alphanumeric",
    #  "name"=>"filen or directory name",
    #  "type"=>"blob|tree",
    #  "mode"=>"100755"}
    # The function raise an FileNotFound exception if the is not a matching file in the
    # repository
    def get_entry(path=nil)

        # if @config[:path] is nil we fetch the whole repository. Than we start with the
        # toplevel directory and that can not be a file
        return false if path.nil?
        
        # read parent directoy to find out the type for the path element
        parent=File.dirname path
        basename=File.basename path

        args=[%(ref_name=#{@conf[:branch]})]
        # add no path option if parent is ".", gitlab isn't be able to handle a . or a empty
        # path option. To recieve the root directory the path option have to be unset
        args<<%(path=#{parent}) unless parent == "."
        
        # define path
        path="/api/v3/projects/#{@conf[:project_id]}/repository/tree"
        
        # add options to path unless args is empty
        path+="?"+args.join("&") unless args.empty?

        # get directory content 
        result=get path
        
        returnvalue=result.find{|o|o["name"]==basename}
        if returnvalue.nil?
            raise FileNotFound
        else
            return returnvalue
        end
    end

    # get a single blob and write it to the basename of @conf[:path]
    def get_single_blob
        entry=get_entry @conf[:path]

        basepath="/api/v3/projects/#{@conf[:project_id]}/repository/blobs/#{@conf[:branch]}"
        option="filepath=#{@conf[:path]}"
        path="#{basepath}?#{option}"

        result=get path

        debug result

        filename=""
        unless @conf[:target].nil?
            filename=@conf[:target]
            filename<<"/" unless filename[-1]=="/"
        end
        filename<<File.basename(@conf[:path])

        out_file = File.new(filename, "w")
        out_file.puts result
        # convert integer to octal to handle the permissions propperly
        out_file.chmod(entry['mode'][2..5].to_i(8))
        out_file.close

        # print filename unless @conf[:verbose] is nil
        verbose_print ".",entry
    end

    def get_dirtree
        debug "enter get_dirtree"

        Dir.chdir(@conf[:target])
        
        # TODO
        # - add logic to decide here to create a top dir or not

        get_subdir @conf[:path]
    end

    # TODO
    # - implement the create option, if create is false, no directory should be created
    # 
    # WARNING
    # - this function can not handle a path to a file
    def get_subdir(dir=nil,create=true)
        debug "enter get_subdir #{dir}"

        # base dir is the directory, where we start
        unless @conf[:basedir].nil?
            basedir=@conf[:basedir]
        end

        # create subdir
        if((dir != "") and (create == true) and (dir != nil))
            debug "basedir=#{basedir}"
            newdir=dir.sub(%r(^#{basedir}),"")

            # remove leading /
            if newdir[0] == '/'
                newdir=newdir[1..-1]
            end

            unless(Dir.exists? newdir)
                debug "mkdir=#{newdir}"
                debug Dir.pwd
                debug newdir.class
                Dir.mkdir(newdir)
            else
                debug %(directory #{newdir} already exists)
            end
        else
            newdir="."
        end

        # check for options
        args=[]
        args<<%(path=#{dir}) unless dir.nil?
        args<<%(ref_name=#{@conf[:branch]})
        
        # define path
        path="/api/v3/projects/#{@conf[:project_id]}/repository/tree"
        
        # add options to path unless args is empty
        path+="?"+args.join("&") unless args.empty?

        # get directory content 
        result=get path

        result.each do |entry|
            # print tree unless @conf[:verbose] is nil
            verbose_print dir,entry

            debug entry

            # TODO
            # check here the path: if it specify a file/blob we could pull the data and
            # print directly to stdout, if the regarding option is set
            #uri = URI('https://gitlab-test/api/v3/projects/2/repository/blobs/master?filepath=lib/library1.lib')
            if entry['type']=='blob'
                # build remote path
                remote_filepath=''
                remote_filepath+=dir+'/' unless dir.nil?
                remote_filepath+=entry['name']
                basepath="/api/v3/projects/#{@conf[:project_id]}/repository/blobs/#{@conf[:branch]}"
                option="filepath=#{remote_filepath}"
                path="#{basepath}?#{option}"

                result=get path

                debug result

                # mode 120000 indicates an symbolic link
                if entry['mode'] == "120000"
                    if((create == true) and (dir != nil))
                        linkname=newdir+'/'+entry['name']
                    else
                        linkname=entry['name']
                    end
                    next if File.symlink?(linkname)
                    File.symlink(result,linkname)

                # handle her usual files
                else
                    if((create == true) and (dir != nil))
                        filename=newdir+'/'+entry['name']
                    else
                        filename=entry['name']
                    end
                    out_file = File.new(filename, "w")
                    out_file.puts result
                    # convert integer to octal to handle the permissions propperly
                    out_file.chmod(entry['mode'][2..5].to_i(8))
                    out_file.close
                end
            end

            # call get_subdir for all directories
            if entry['type']=='tree'
                if dir.nil?
                    get_subdir entry['name']
                elsif dir ==""
                    get_subdir entry['name']
                else
                    get_subdir dir+"/"+entry['name']
                end
            end
        end
    end

    def verbose_print dir,entry
        unless @conf[:verbose].nil?
            type=entry['type']
            type="link" if(type=="blob" and entry['mode']=="120000")
            mode=entry['mode'][3..5]
            info=%(#{entry['name']} [#{type}] [#{mode}])
            unless dir.nil?
                puts %(#{dir}/#{info})
            else
                puts info
            end
        end
    end

    def update_project_id
        path="/api/v3/projects"
        debug "get path"
        r=get path
        debug "collect data"
        r.each{|project|
            debug "http_url_to_repo",project['http_url_to_repo'],"web_uri",project['http_url_to_repo']
            if (
                (project['http_url_to_repo'] == @conf[:uri]) or
                (project['web_url'] == @conf[:uri])
            )
                @conf[:project_id]=project['id']
                if @conf[:branch].nil?
                    @conf[:branch]=project['default_branch']
                end
            end
        }
        raise "can't find project id for #{@conf[:uri]}" if @conf[:project_id].nil?
    end

    def update_private_token
        pass=''
        if ENV[@conf[:passvarname]].nil?
            # read pass from stdin
            status = Timeout::timeout(@conf[:stdin_timeout]) {
                pass=STDIN.read.chomp
            }
        else
            # read pass from environment
            pass=ENV[@conf[:passvarname]]
        end

        debug ["USERNAME",@conf[:username]]
        
        path="/api/v3/session"
        postdata=URI.encode("login=#{@conf[:username]}&password=#{pass}")
        r=post path,postdata
        @conf[:privat_token]=r['private_token']
    rescue Timeout::Error
        STDERR.puts "can't read pass from stdin"
        exit 1
    end

    def get(path,return_type=nil)
        debug "GET: ",path
        http=connection
        debug "http.inspect: ",http.inspect
        data=""
        resp = http.get(path, 'PRIVATE-TOKEN' => @conf[:privat_token]){|line|
            data+=line
        }

        raise "GET.error: code #{resp.code} "+resp.message if resp.code.to_i >= 400

        if(resp.content_type=="application/json")
            #debug JSON.parse(data)
            return JSON.parse(data)
        else
            #debug data
            return data
        end
    end

    def post(path,postdata)
        data=''
        http=connection
        debug 'POSTPATH',path
        resp = http.post(path,postdata){|l|data+=l}

        raise resp.message if resp.code.to_i >= 400

        if(resp.content_type=="application/json")
            return JSON.parse(data)
        else
            return data
        end
    rescue Exception => e
        debug 'POSTDATA',postdata
        STDERR.puts @conf[:uri]+": "+e.message
        exit
    end

    # generate a new http/https connection object
    def connection
        debug "create connection",@conf[:uri]
        uri=URI(@conf[:uri])
        debug "Net::HTTP.new", uri.host, uri.port
        http = Net::HTTP.new(uri.host, uri.port)

        # TODO
        # check URI for http/https
        http.use_ssl = true

        # TODO
        # make it configureable over dcommand line flags
        http.verify_mode = OpenSSL::SSL::VERIFY_NONE
        
        return http
    end

    def examples
        cmd=File.basename $0
        return [
            "",
            "  Examples:",
            "    # read password from environment",
            "    PASS=123 #{cmd} -p PASS -u user -r https://...",
            "",
            "    # read password from stdin",
            "    echo 123 | ssh user@host '#{cmd} -u user -r https://...'",
            "",
            "    # example repo url",
            "    #{cmd} -r https://gitlab.mydomain.com/team/testapi.git",
            "",
            "  repository: https://github.com/rkray/fetch_git_subdir"
        ].join("\n")
    end

    def option_parser
        option_parser = OptionParser.new do |opts|
            opts.banner = "Usage: #{File.basename $0} [options]"
            opts.on("-h", "--help", "Prints this help") do
                puts opts.help
                puts examples
                exit
            end
            opts.on( "-d", "--debug", "enable debug mode") do
                @conf[:debug] = true
            end
            opts.on( "-v", "--verbose", "enable verbose printing") do
                @conf[:verbose] = true
            end
            # for now disable modes
            # opts.on( "-m", "--mode (gitlab|git)", "set mode, default is 'gitlab'") do |option|
            #     @conf[:mode]=option
            # end
            opts.on( "-u", "--username USERNAME", "set username") do |option|
                @conf[:username]=option
            end
            opts.on( "-p", "--passvarname NAME",
                "the name with the environment variable",
                "default is GITPASS. If no environment",
                "variable is set, the programm tries to",
                "read the password from stdin."
            ) do |option|
                @conf[:passvarname]=option
            end
            opts.on( "-r", "--repository URI",
                "HTTP/HTTPS repository URL as shown by gitlab","project page"
            ) do |option|
                @conf[:uri]=option
            end
            opts.on( "-a", "--path PATH", "fetch all files from PATH. Do fetch all files use a single '/'.") do |option|
                @conf[:path]=option
            end
            opts.on( "-t", "--target PATH", "target directory") do |option|
                @conf[:target]=option
            end
            opts.on( "-b", "--branch BRANCH", "set repository branch. By default the project default branch is used.") do |option|
                @conf[:branch]=option
            end
        end
        option_parser.parse!
    end

    def debug *a
        if @conf[:debug]==true
            pp a
        end
    end
    
end

# don't run this part neither load from another script nor irb
if $0 == __FILE__
    @fgs = FetchGitSubdir.new
    
    @fgs.run
end
